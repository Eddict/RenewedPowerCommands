<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="41182" xml:space="preserve">
    <value>1.0</value>
  </data>
  <data name="15600" xml:space="preserve">
    <value>RenewedPowerCommands</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="10969" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAR5JREFUOE+N
        U7sKwkAQzB/oH5gvED/BHxAEWwU7Gwuxtbewsg5CQBArsTWNjY0WkkawtVELhaRKG3fO3by8JA4MrHsz
        e3vrxhAEQdAgesSQaBLtxG8QMXImW2JQsvF4+V59vInEk9UprPSWodFZKCJGDmfQs/ULmGCG8Pn2o1hH
        vgRF4k5QQAS1wTqKW9Nd6Jxvioglz53YbE8XEFrORZ4jN7pSBM9Bju36AmB3vhczBtxGJ3KmPAJdgaSZ
        NcUFNEyaq8T8JxQBRSBGR3L7zxDzQKJm1qz9G3UgQT+7EyiEhaOz9CJlQYKRzsw3l5rt4/WeWuPZ1oXZ
        JZa2jWl7Q+sQmXmhYK6yrBgkVFOXNaYYX+B/ZgEZMH1l5lQODOMDWXzTTF3fxZ4AAAAASUVORK5CYII=
</value>
  </data>
  <data name="25288" xml:space="preserve">
    <value>A set of power commands for Visual Studio</value>
  </data>
  <data name="197" xml:space="preserve">
    <value>RenewedPowerCommands Commands</value>
  </data>
  <data name="ToolsOptionsKeywords_General" xml:space="preserve">
    <value>Format document on save; Remove and Sort Usings on save</value>
  </data>
  <data name="ToolsOptionsKeywords_Commands" xml:space="preserve">
    <value>Clear All Panes; Clear Recent File List; Clear Recent Project List; Collapse Projects; Copy As Project Reference; Copy Class; Copy Path; Copy Reference; Edit Project File; Email Code Snippet; Extract Constant; Insert Guid Attribute; Open Containing Folder; Open Command Prompt; Paste Class; Paste Reference; Reload Projects; Remove and Sort Usings; Transform Templates; Undo Close; Unload Projects</value>
  </data>
  <data name="4606" xml:space="preserve">
    <value>General</value>
  </data>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="1000" type="System.Byte[], mscorlib">
    <value>
        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
</value>
  </data>
  <data name="1912" xml:space="preserve">
    <value>Commands</value>
  </data>
  <data name="2891" xml:space="preserve">
    <value>RenewedPowerCommands General Options</value>
  </data>
  <data name="9394" xml:space="preserve">
    <value>PowerCommands for Visual Studio</value>
  </data>
</root>