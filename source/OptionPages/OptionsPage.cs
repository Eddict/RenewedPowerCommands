using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell;
using Tasler.RenewedPowerCommands.Commands;

namespace Tasler.RenewedPowerCommands.OptionPages
{
	public enum DisabledEnabled
	{
		Disabled,
		Enabled,
	}

	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDual)]
	[Guid("7FF0673B-4E19-45FD-86E3-09473884C44F")]
	public class OptionsPage : DialogPage
	{
		[Category("Save behavior")]
		[DefaultValue(false)]
		[DisplayName("Format document on save")]
		[Description("Enables formatting of tabs, spaces and other characters in a document to be saved. It is equivalent to using Format Document command under the Edit->Advanced menu. Disabled by default.")]
		public bool FormatOnSave { get; set; }

		[Category("Save behavior")]
		[DefaultValue(false)]
		[DisplayName("Remove and Sort Usings on save")]
		[Description("Removes unused using statements and sorts the remaining using statements in the C# document being saved. Disabled by default.")]
		public bool RemoveAndSortUsingsOnSave { get; set; }

		[Category("Commands")]
		[DefaultValue(DisabledEnabled.Enabled)]
		[DisplayName("Collapse Projects")]
		[Description("Collapses a project or projects in the Solution Explorer starting from the root selected node. This option resides in three different places on the Solution Explorer: Solution, Solution folders and Project nodes respectively.")]
		public DisabledEnabled CollapseProjectsCommand { get; set; } = DisabledEnabled.Enabled;

		[Category("Commands")]
		[DefaultValue(DisabledEnabled.Enabled)]
		[DisplayName("Remove and Sort Usings")]
		[Description("Removes and sort using statements for all classes given a project. It is useful, for example, in removing or organizing the using statements generated by a wizard. This command can be executed from a solution node or a single project node.")]
		public DisabledEnabled RemoveAndSortUsingsCommand { get; set; } = DisabledEnabled.Enabled;

		[Category("Commands")]
		[DefaultValue(DisabledEnabled.Enabled)]
		[DisplayName("Copy and Paste Class")]
		[Description("Copies/Pastes a selected class's entire content to/from the clipboard. When pasting a class, it is renamed to avoid a compilation error. It can be executed from a single project item or a project item with dependent sub items.")]
		public DisabledEnabled CopyPasteClassCommand { get; set; } = DisabledEnabled.Enabled;

		public bool IsCommandEnabled(string commandName)
		{
			if (!s_commandNameMappings.TryGetValue(commandName, out var result))
			{
				throw new ArgumentException(string.Format(Properties.Resources.UnknownCommandName_Format, commandName), nameof(commandName));
			}

			return result.Invoke(this) != DisabledEnabled.Disabled;
		}

		private static readonly Dictionary<string, Func<OptionsPage, DisabledEnabled>> s_commandNameMappings =
			new Dictionary<string, Func<OptionsPage, DisabledEnabled>>()
		{
			{ typeof(CollapseProjectsCommand).Name, p => p.CollapseProjectsCommand },
			{ typeof(RemoveSortUsingsCommand).Name, p => p.RemoveAndSortUsingsCommand },
			{ typeof(CopyClassCommand       ).Name, p => p.CopyPasteClassCommand },
			{ typeof(PasteClassCommand      ).Name, p => p.CopyPasteClassCommand },
		};
	}
}
